/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DynamicRTL
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DynamicRTL = class extends import_obsidian.Plugin {
  async onload() {
    const RTLRegEx = /[\u0591-\u07FF\u200F\u202B\u202E\uFB1D-\uFDFD\uFE70-\uFEFC]/;
    this.registerMarkdownPostProcessor((container, context) => {
      container.querySelectorAll("p,div.cm-line,h1,h2,h3,h4,h5,h6,div.callout-title-inner").forEach((element) => {
        element.setAttribute("dir", "auto");
      });
      container.querySelectorAll("table,ol,ul,pre").forEach((element) => {
        var _a;
        (_a = element.parentElement) == null ? void 0 : _a.setAttribute("dir", "auto");
      });
      container.querySelectorAll(".callout-title").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(0))) {
          element.style.direction = "rtl";
        }
      });
      container.querySelectorAll("blockquote").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(1))) {
          element.style.borderLeft = "0";
          element.style.borderRight = "var(--blockquote-border-thickness) solid var(--blockquote-border-color)";
          element.style.marginRight = "23px";
          const innerContent = element.querySelector("p");
          if (innerContent) {
            innerContent.style.marginRight = "23px";
          }
        }
      });
      container.querySelectorAll("li").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(0))) {
          element.querySelectorAll(".list-bullet").forEach((bullet) => {
            bullet.style.float = "right";
            bullet.classList.add("rtl-bullet-point");
          });
          element.style.textAlign = "right";
          element.style.direction = "rtl";
          element.classList.add("rtlListItem");
        } else {
          element.style.textAlign = "left";
          element.style.direction = "ltr";
        }
      });
      container.querySelectorAll("h1,h2,h3,h4,h5,h6").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(0))) {
          const icon = element.querySelector("div");
          if (icon) {
            icon.style.marginRight = "-22px";
            icon.style.float = "right";
          }
        }
      });
      container.querySelectorAll("ol,ul").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(1))) {
          element.classList.add("rtlList");
        }
      });
      container.querySelectorAll("p").forEach((element) => {
        let biDiParagraph = "";
        element.innerHTML.split("<br>").forEach((line) => {
          biDiParagraph += `<div dir="auto">${line}</div>`;
        });
        element.innerHTML = biDiParagraph;
      });
      container.querySelectorAll("code").forEach((element) => {
        if (element.classList.length == 0) {
          let biDiCode = "";
          const lineList = element.innerHTML.split("\n");
          if (lineList.length > 1) {
            lineList.forEach((line, index, array) => {
              if (index != array.length - 1) {
                biDiCode += `<div dir="auto">${line}</div>`;
              }
            });
            element.innerHTML = biDiCode;
          }
        }
      });
      container.querySelectorAll("pre").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(0))) {
          element.classList.add("rtlPre");
        }
      });
      container.querySelectorAll("a.external-link").forEach((element) => {
        if (RTLRegEx.test(element.innerText.charAt(0))) {
          element.style.backgroundPosition = "center left";
          element.style.paddingRight = "unset";
          element.style.paddingLeft = "16px";
        }
      });
    });
  }
};
